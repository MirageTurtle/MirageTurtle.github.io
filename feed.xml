<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="4.3.2">Jekyll</generator>
  
  
  <link href="https://mirageturtle.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://mirageturtle.github.io/" rel="alternate" type="text/html" />
  <updated>2023-12-07T17:41:26+08:00</updated>
  <id>https://mirageturtle.github.io//</id>

  
    <title type="html">MirageTurtle’s blog</title>
  

  
    <subtitle>No description.</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">磕磕绊绊的Bitwarden</title>
      
      
      <link href="https://mirageturtle.github.io/2023/12/bitwarden/" rel="alternate" type="text/html" title="磕磕绊绊的Bitwarden" />
      
      <published>2023-12-04T16:18:00+08:00</published>
      <updated>2023-12-04T16:18:00+08:00</updated>
      <id>https://mirageturtle.github.io/2023/12/bitwarden</id>
      <content type="html" xml:base="https://mirageturtle.github.io/2023/12/bitwarden/">&lt;h1 id=&quot;密码管理器&quot;&gt;密码管理器&lt;/h1&gt;

&lt;p&gt;相信很多人对密码管理器都不陌生了，尤其是在这个越来越多人重视网络安全的时代。我就直接照搬WikiPedia了：”A password manager is a computer program that allows users to store and manage their passwords for local applications or online services such as web applications, online shops or social media.”&lt;/p&gt;

&lt;p&gt;我其实在今年六七月份就考虑使用密码管理器了，最开始考虑的就是Bitwarden，主要原因是其可私有化部署，其他原因包括但不限于免费（1Password要付费）与支持Apple平台（KeePass及相关衍生软件尽管开源但无法支持Apple全平台）。结果在我去搭的时候发现我域名过期了，Bitwarden要求SSL/TLS，所以就放弃了。&lt;/p&gt;

&lt;p&gt;再次有这个念头是某天在学校某技术交流群里看到有人讨论，同时惊喜地看到他们说GitHub Student Package可以免费用1Password，我很高兴决定选择相信1Password从此过上使用密码管理器的美好生活。结果搜了发现只有第一年免费，所以决定续一下域名然后重新Bitwarden，就顺便记录一下自己部署时的磕磕绊绊吧。&lt;/p&gt;

&lt;h1 id=&quot;曲折的bitwarden搭建&quot;&gt;曲折的Bitwarden搭建&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里按照我尝试的先后顺序记录了，需要看最后结果以及一些经验总结的可以直接跳到最后。
不是一篇可以完全&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paste and use&lt;/code&gt;的博客，但一些细节可能具有普适性，希望可以帮到你。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;一个插曲：续域名的时候付了钱结果可能由于Alipay在2023年11月的某些原因，导致后台没能成功拿到域名，还联系了客服帮忙解决。&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker肯定是要用的&quot;&gt;Docker肯定是要用的&lt;/h2&gt;

&lt;p&gt;我还是习惯非系统的services或非简单脚本可以解决的services用docker来搭建，不过确实有一些弊端以及我自己能力上的不足导致的一些问题，不过自己用起来应该没啥问题。&lt;/p&gt;

&lt;p&gt;Docker Image是&lt;a href=&quot;https://hub.docker.com/r/vaultwarden/server&quot;&gt;vaultwarden/server&lt;/a&gt;，原本叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwarden_rs&lt;/code&gt;，从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2.21.0&lt;/code&gt;更名。&lt;/p&gt;

&lt;h2 id=&quot;我在学校的机器不是就很好吗&quot;&gt;我在学校的机器不是就很好吗？&lt;/h2&gt;

&lt;p&gt;我在2021年9月份的时候为了打英雄联盟自己组装了一台配置特别弱的机器，结果今年在北京实习的时候买了台游戏本，这台机子也就没用了（主要配置太低也卖不掉），就直接放到办公室当Server用了。正好办公室路由器是有公网IP的，正好我的机器之前有搭过nginx（不过是为了自己做一些web vulnerability的实验，所以本地就好），直接搞个端口映射配个nginx反代不是就直接好了？甚至数据还在我能直接触摸到的一块硬盘上。于是我直接开搞。&lt;/p&gt;

&lt;h3 id=&quot;vaultwarden&quot;&gt;Vaultwarden&lt;/h3&gt;

&lt;p&gt;新建了一个文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwarden&lt;/code&gt;，然后在目录下建了子文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bw-data&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;，我就直接贴compose了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-docker-compose&quot;&gt;version: &quot;3&quot;

services:
  bitwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    restart: always
    ports:
        - &quot;10080:80&quot;
        - &quot;3012:3012&quot;
    volumes:
      - ./bw-data:/data
    environment:
      WEBSOCKET_ENABLED: &quot;true&quot;
      SIGNUPS_ALLOWED: &quot;true&quot;  # I&apos;ll change to false after I signup.
      WEB_VAULT_ENABLED: &quot;true&quot;
      ADMIN_TOKEN: &quot;YOUR_ADMIN_TOKEN&quot;  # I use openssl to generate this token.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为也是参考网上的一些教程，但是找不到了，没有贴链接很对不起原作者。以后如果能找到我一定补！&lt;/p&gt;

&lt;p&gt;然后跑起来发现10080端口没什么问题，接下来就只需要搞nginx这一部分就好了。&lt;/p&gt;

&lt;h3 id=&quot;要搞好了&quot;&gt;要搞好了？&lt;/h3&gt;

&lt;p&gt;前面也提到我之前尝试搞过，但是因为SSL/TLS的原因放弃了。所以我理所当然是要给域名申请一个证书的。因为之前搞证书的时候用的&lt;a href=&quot;https://github.com/acmesh-official/acme.sh&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;letsencrypt&lt;/code&gt;&lt;/a&gt;，这次也就还用它了。&lt;/p&gt;

&lt;p&gt;证书这里不太清楚是我的原因还是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;脚本的原因，生成的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csr&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;，所以我就用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl req -text -inform PEM -in example.org.csr -out example.org.pem&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl x509 -req -in example.org.pem -signkey example.key -out example.org.crt&lt;/code&gt;生成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crt&lt;/code&gt;证书。如果我没理解错的话，这一部分self-sign了证书，算是伏笔了（写博客的时候才想起来）。&lt;/p&gt;

&lt;p&gt;搞好证书之后配置nginx反代，这一部分参考了&lt;a href=&quot;https://www.cnblogs.com/pomelo688/p/15959862.html&quot;&gt;这篇博客&lt;/a&gt;，这里感谢作者的分享。&lt;/p&gt;

&lt;p&gt;然后直接访问。浏览器报”网站不安全”？无所谓，继续访问！然后就看到Bitwarden的登陆界面了，注册登陆过后，发现可用。考虑到已经凌晨1点，我就去休息了。&lt;/p&gt;

&lt;h3 id=&quot;可恶的证书和校园网&quot;&gt;可恶的证书和校园网&lt;/h3&gt;

&lt;p&gt;显然还是有问题的，但我早上起来还是抱着侥幸心理在iPhone上试了一下，结果发现没办法登陆，果然证书还是有问题。&lt;/p&gt;

&lt;p&gt;最后考虑到未来网络环境不一定都是校园网，所以用手机热点在电脑的浏览器上试了一下，直接无法访问。简单看了一下&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/doc/ustcnet-faq/&quot;&gt;校园网常见问题与快速自查指南&lt;/a&gt;，发现80端口会被阻止，所以只好在我的云服务器上搭建了。&lt;/p&gt;

&lt;h2 id=&quot;我的老破小&quot;&gt;我的老破小&lt;/h2&gt;

&lt;p&gt;这台机子是我手上唯一一台云服务器了，但它应该是我一年前因为便宜买来的特别弱的一台机器（可能都找不到这么弱的机器了，因为它的优势在于网络带宽高和网络流量无限制），因为我没有续费之前的存储盘，所以它就只有10GB左右的本地存储可以用了。但我觉得反正上面也什么都没跑，应该也够用了吧？&lt;/p&gt;

&lt;h3 id=&quot;官方有脚本好呀&quot;&gt;官方有脚本好呀！&lt;/h3&gt;

&lt;p&gt;之前因为自己配置nginx反代是因为之前机器上有一个nginx了，正好配一下反代就行，现在在一个新机子上搞，这不直接用&lt;a href=&quot;https://bitwarden.com/help/install-on-premise-linux/&quot;&gt;官方脚本&lt;/a&gt;？&lt;/p&gt;

&lt;p&gt;一路畅通无阻，最后直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bitwarden.sh start&lt;/code&gt;，甚至都不愿意&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;来检查一下，就着急浏览器访问，结果真打不开。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;一看，官方脚本配置的nginx container一直在restart，直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df -s&lt;/code&gt;发现空间满了，我直接哭了（当时可用空间就只有不到6GB的样子，但我没想到会直接占用这么大）。&lt;/p&gt;

&lt;h3 id=&quot;从头再来&quot;&gt;从头再来！&lt;/h3&gt;

&lt;p&gt;反正这机子很久没用了，我就直接重装了Debian 10（不往上装是因为内存太小了），发现Debian初始系统空间占用好像要比Ubuntu Server初始占用小上不少（这很合理）。装好之后还有不到8GB的空间，但是反正已经决定使用nginx反代的方案了，就不再尝试了，万一占用还是很多最后没什么空间然后太卡也不好。&lt;/p&gt;

&lt;p&gt;剩下的步骤就只有改DNS记录和修好证书了。&lt;/p&gt;

&lt;p&gt;去简单Google一下可以发现，我的证书是self-signed。正好Google时发现了&lt;a href=&quot;https://github.com/acmesh-official/acme.sh/issues/4659&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;的RCE&lt;/a&gt;（&lt;a href=&quot;https://www.cve.org/CVERecord?id=CVE-2023-38198&quot;&gt;CVE-2023-38198&lt;/a&gt;），于是决定参考&lt;a href=&quot;https://mindsers.blog/en/post/https-using-nginx-certbot-docker/&quot;&gt;一篇Blog&lt;/a&gt;用&lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt;和letsencrypt来申请证书。&lt;/p&gt;

&lt;p&gt;真心感谢这篇Blog，也真心推荐，因为写的很通俗易懂且想起，包括使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dry-run&lt;/code&gt;来check你的配置。&lt;/p&gt;

&lt;h3 id=&quot;数据备份&quot;&gt;数据备份&lt;/h3&gt;

&lt;p&gt;为了满足之前”将数据存在我可以触摸到的一块硬盘上”的想法，我添加了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cronjob&lt;/code&gt;每天凌晨来&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;数据。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;搭好了没啥问题之后，因为最近赶S&amp;amp;P Deadline的缘故，我要去注册一下，但没想到这成了我搭好Bitwarden之后的第一次使用。希望这并不是暗示我在学术科研路上总磕磕绊绊。&lt;/p&gt;

&lt;p&gt;跟taoky聊了聊，其实完全可以Bitwarden搭建在学校的机器上，然后域名解析到我的云服务器上，最后tunnel回学校服务器即可，毕竟也只是封了80、443等常用的敏感接口，需要的话证书直接用DNS Challenge就行（我当时倒确实忘了可以DNS Challenge）。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;

&lt;p&gt;因为中间简单的初始化了一个server，这里也简单记录一下。&lt;/p&gt;

&lt;p&gt;最开始只有root：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update
apt upgrade
apt &lt;span class=&quot;nb&quot;&gt;install sudo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adduser testuser
usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;testuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后后续就尽量用普通用户了，装了docker之后记得&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo usermod -aG docker testuser&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usermod&lt;/code&gt;是需要重新login来生效的。&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;/h2&gt;

&lt;p&gt;正如之前所说，我还是习惯用docker来跑这些，但是稍微大一点的service例如nginx配置有比较麻烦，所以我会先跑一个container，然后把初始的文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker cp&lt;/code&gt;出来再进行配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /your/work/path
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; tmp-nginx &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx
docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp-nginx:/etc/nginx ./nginx
docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp-nginx:/usr/share/nginx/html ./www
docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;tmp-nginx:/var/log/nginx ./log
docker stop tmp-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后配置的时候&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volumes&lt;/code&gt;也就照着&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt;时的路径配就好了。&lt;/p&gt;

&lt;h2 id=&quot;证书&quot;&gt;证书&lt;/h2&gt;

&lt;p&gt;我这方面确实是新手，就简单记录一下我所遇到的坑吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保证80端口可以被challenge
    &lt;ul&gt;
      &lt;li&gt;standalone或类似模式可能需要额外设置来保证80端口&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保证网页目录可写保证challenge&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">记录一下我配置Bitwarden时的坑，但并不是可以完全 Paste and use，尽管我觉得一些细节和经验总结可能在更大程度上帮到你。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">HackerGame 2023 Writeup</title>
      
      
      <link href="https://mirageturtle.github.io/2023/11/hackergame-2023-writeup/" rel="alternate" type="text/html" title="HackerGame 2023 Writeup" />
      
      <published>2023-11-05T11:30:00+08:00</published>
      <updated>2023-11-05T11:30:00+08:00</updated>
      <id>https://mirageturtle.github.io/2023/11/hackergame-2023-writeup</id>
      <content type="html" xml:base="https://mirageturtle.github.io/2023/11/hackergame-2023-writeup/">&lt;h1 id=&quot;0x00-overview&quot;&gt;0x00 Overview&lt;/h1&gt;

&lt;p&gt;今年的成绩还挺不错的，对于我这样一个不怎么接触CTF的新手（尽管已经接触HackerGame两年了）来说。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/overview.png&quot; alt=&quot;Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年算是搁置了科研，在hg上投入了一定的精力，相比于去年组内排名47名（总共多少人参赛）1750分好了许多，当然也有一部分原因是今年简单题比较简单。&lt;/p&gt;

&lt;h1 id=&quot;0x01-writeup&quot;&gt;0x01 Writeup&lt;/h1&gt;

&lt;p&gt;加下来写一下自己的Writeup吧，对于有思考或感触的题目，我会在下一部分再写，毕竟是第一次有了一定的名次，还是想留下一些自己的Writeup哈哈。&lt;/p&gt;

&lt;p&gt;可能会写的有点乱，也可能有很少的图片，之后有机会慢慢加吧。&lt;/p&gt;

&lt;h2 id=&quot;hackergame-启动&quot;&gt;Hackergame 启动&lt;/h2&gt;

&lt;p&gt;签到题是hg老传统了：改URL参数。&lt;/p&gt;

&lt;p&gt;打开题目页面，&lt;del&gt;点击开始录制，大喊Hackergame启动，&lt;/del&gt;点击提交，可以看到URL中多了一个参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;similarity&lt;/code&gt;，将这个值修改为100，再次访问即可。&lt;/p&gt;

&lt;p&gt;事实上，你需要录制一次（当然你可以不喊）再提交，否则你无法获取到Hint：”说得不够标准哦，相似度大于 99.9% 才能拿到 flag。”。&lt;/p&gt;

&lt;h2 id=&quot;猫咪小测&quot;&gt;猫咪小测&lt;/h2&gt;

&lt;p&gt;作为组内一血，我还是想记录一下这道题。可惜的是丢了总一血，因为第四问太着急了，导致没有仔细看是哪个会议，导致第三次提交才正确，提交上去的时候发现已经有三个人做出来了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？（30 分）
这个题去&lt;a href=&quot;https://lib.ustc.edu.cn&quot;&gt;中国科大图书馆&lt;/a&gt;查询书名（可能需要考虑把版本号去掉），会发现这本书藏在外文书库，此时直接Google”西区外文书库”（可能需要考虑加上中国科大相关关键词），会发现&lt;a href=&quot;https://lib.ustc.edu.cn/hour/&quot;&gt;开放时间&lt;/a&gt;中有提到西区外文书库在12楼。&lt;/li&gt;
  &lt;li&gt;今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？（30 分）
直接Google”可观测宇宙中的鸡的密度上限”，可以找到&lt;a href=&quot;https://www.zhihu.com/question/20337132/answer/3023506910&quot;&gt;一篇相关知乎&lt;/a&gt;，可以直接找到答案为10的23次方。&lt;/li&gt;
  &lt;li&gt;为了支持 TCP BBR 拥塞控制算法，在编译 Linux 内核时应该配置好哪一条内核选项？（20 分）
这个题我直接问了GPT4，因为我认为这个问题很适合它（不太能说出来原因）。答案是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_TCP_CONG_BBR&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 MyPY mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？（20 分）
我的思路是先找论文，就可以搜到相关会议的网站。Google搜索”mypy infinite loop paper”，这个时候已经找到论文&lt;a href=&quot;https://drops.dagstuhl.de/opus/volltexte/2023/18237/pdf/LIPIcs-ECOOP-2023-44.pdf&quot;&gt;Python Type Hints Are Turing Complete - DROPS&lt;/a&gt;了。但由于太着急，我就直接提交了DROPS上去，结果发现不对。后来又加了”halting problem”、”filetype:pdf”的关键词，最后确定就是这篇文章，最后再文章的Abstract部分以及会议logo中得到了会议缩写ECOOP。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;更深更暗&quot;&gt;更深更暗&lt;/h2&gt;

&lt;p&gt;打开题目看完介绍，两个加粗的Hint：”hidden flag”和”deep underground”，那就往下翻就完事了。翻了一会感觉不太对劲，于是打开F12，直接搜”flag”就搜到了。&lt;/p&gt;

&lt;p&gt;不过身边也有同学按着空格往下翻最后翻到了的，这样的话flag会一闪而过，他拿了录了屏然后回放看到了flag。&lt;/p&gt;

&lt;h2 id=&quot;旅行照片-30&quot;&gt;旅行照片 3.0&lt;/h2&gt;

&lt;p&gt;我第一次打hg应该是在两年前，也就是旅行照片第一次出来的时候，那年我应该是做了签到题就没不会做了。去年的旅行照片除了一个航班没找到，剩下都找到了（事实上除了航班其他信息都找到了，只需要一个合适的查航班的网站即可，但我当时找的都是需要付费的，有点可惜了）。今年的旅行照片反而一筹莫展，放到了比较靠后的位置去做。&lt;/p&gt;

&lt;p&gt;由于这道题目的特殊性，我会先展示自己觉得重要的一些文本内容和用到的图片。&lt;/p&gt;

&lt;h3 id=&quot;题目&quot;&gt;题目&lt;/h3&gt;

&lt;p&gt;离开校园后，你和学长走到了附近的一家拉面馆用餐。那家店里的拉面香气扑鼻，店内的装饰和氛围也充满了日式的风格。 学长（下图左一）与你分享了不少学校的趣事。饭后，你们决定在&lt;strong&gt;附近&lt;/strong&gt;散步，享受这难得的闲暇时光。&lt;strong&gt;当你们走到一座博物馆前时， 马路对面的喷泉和它周围的景色引起了你的注意&lt;/strong&gt;。下午，白色的帐篷里即将举办一场大型活动，人们忙碌的身影穿梭其中，充满了期待与热情。&lt;/p&gt;

&lt;p&gt;在参观完博物馆后，学长陪你走到了上野站。你们都感到有些不舍，但知道每次的分别也是为了下次更好的相聚。 &lt;strong&gt;学长那天晚上将继续他的学术之旅，打算乘船欣赏东京的迷人夜景和闪耀的彩虹大桥（Rainbow Bridge）。&lt;/strong&gt; 而你则搭乘了&lt;strong&gt;开往马里奥世界的电车&lt;/strong&gt;，在那里度过了一段欢乐的时光。&lt;del&gt;这一段是我写Writeup时注意到的，做题时没注意到结果也稀里糊涂做出来了。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/travel-photo/nobel-prize.jpeg&quot; alt=&quot;Nobel Prize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/travel-photo/ramen-shop.jpeg&quot; alt=&quot;Ramen Shop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/travel-photo/ueno-park.jpeg&quot; alt=&quot;Ueno Park&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你还记得与学长见面这天是哪一天吗？（格式：yyyy-mm-dd）&lt;/li&gt;
  &lt;li&gt;在学校该展厅展示的所有同种金色奖牌的得主中，出生最晚者获奖时所在的研究所缩写是什么？&lt;/li&gt;
  &lt;li&gt;帐篷中活动招募志愿者时用于收集报名信息的在线问卷的编号（以字母 S 开头后接数字）是多少？&lt;/li&gt;
  &lt;li&gt;学长购买自己的博物馆门票时，花费了多少日元？&lt;/li&gt;
  &lt;li&gt;学长当天晚上需要在哪栋标志性建筑物的附近集合呢？（请用简体中文回答，四个汉字）&lt;/li&gt;
  &lt;li&gt;进站时，你在 JR 上野站中央检票口外看到「ボタン＆カフリンクス」活动正在销售动物周边商品，该活动张贴的粉色背景海报上是什么动物（记作 A，两个汉字）？ 在出站处附近建筑的屋顶广告牌上，每小时都会顽皮出现的那只 3D 动物是什么品种？（记作 B，三个汉字）？（格式：A-B）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;题解&quot;&gt;题解&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;注意到在拉面馆的合照中，学长带了STATPHYS28会议的的参会牌，可以猜测当天是会议的其中一天，也就是08-07到08-11中的一天。由于每两问对应一个flag，我们可以确定第二问答案之后进行遍历，最后得到是2023-08-10。&lt;/li&gt;
  &lt;li&gt;直接Google可以知道是诺贝尔奖（好像是物理学奖？不太清楚每个类型的奖牌是否一样），直接去东京大学（因为STATPHYS28是在东京大学举办的）的Wikipedia查看知名校友，可以找到题目所指的得主是&lt;a href=&quot;https://en.wikipedia.org/wiki/Takaaki_Kajita&quot;&gt;Takaaki Kajita&lt;/a&gt;，可以看到2015年获得诺贝尔物理学奖，此时他在ICRR担任director。&lt;/li&gt;
  &lt;li&gt;这一问我是做的最后一题（准确来说是最后获取到打开局面的信息的，我以为我第四问找到答案了实际上并没有），关键在于找到题目中的”帐篷中活动”是什么，我也确实找了很久。从Google Map上很容易可以看到这里是上野公园，官方名称上野恩赐公园。
    &lt;ul&gt;
      &lt;li&gt;我先是找到了某个东京都官方的网站，可惜上面不展示历史活动信息（不知道为什么我当时的浏览记录没有保存下来，很可惜不能展示更详细的搜索思路），但是我从那个网站找到了广场的官方名称为喷水广场。&lt;/li&gt;
      &lt;li&gt;考虑到活动会提前通知，同时又需要招募志愿者，所以我在Google上搜索相关关键词时限制了搜索时间范围，最开始从7月到9月，不断缩小范围，最后我发现搜索到了很多具体的活动，但是都不包含8月10日这一天，于是我决定加上一个关键词”8月”，最后在搜索到&lt;a href=&quot;https://www.uenopark.info/2023/ume-shu-2023/&quot;&gt;一个网站&lt;/a&gt;，上面说明08月10日到08月13日会举办全国梅酒节。&lt;/li&gt;
      &lt;li&gt;最后搜索”东京全国梅酒节”，可以搜索到&lt;a href=&quot;https://umeshu-matsuri.jp/tokyo_ueno&quot;&gt;其官方网站&lt;/a&gt;，其中可以找到&lt;a href=&quot;https://umeshu-matsuri.jp/tokyo_staff/&quot;&gt;招募志愿者的链接&lt;/a&gt;，打开可以看到问卷的链接为&lt;a href=&quot;https://ws.formzu.net/dist/S495584522/&quot;&gt;https://ws.formzu.net/dist/S495584522/&lt;/a&gt;，答案显而易见。&lt;/li&gt;
      &lt;li&gt;有点可惜的地方在于没有很快找到&lt;a href=&quot;https://www.uenopark.info&quot;&gt;那个记录上野公园活动信息的网站&lt;/a&gt;，浪费了不少时间，这里留个链接来帮助上野的朋友们节省时间（笑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;这题我以为我很快定位到了答案结果并没有。在Google Map上可以看到上野公园喷水广场附近有两个博物馆：东京国立博物馆和国立科学博物馆，不确定的话把这两个博物馆的所有门票价格都试一遍即可，最后发现是0元。
    &lt;ul&gt;
      &lt;li&gt;我本来以为0元是国立科学博物馆的特殊票价，但&lt;a href=&quot;https://github.com/USTC-Hackergame/hackergame2023-writeups/blob/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%203.0/README.md&quot;&gt;官方Writeup&lt;/a&gt;给的理由是东京国立博物馆的Visitor Information中有提到Campus Members中学校的学生可以免费参观常规展览，所以为0元。只能说歪打正着吧。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;题目中提到了晚上要乘船（事实上我忘记这条信息了，只考虑了晚上），可以在&lt;a href=&quot;https://statphys28.org/&quot;&gt;STATPHYS28的官网&lt;/a&gt;找到&lt;a href=&quot;https://statphys28.org/programtt.html&quot;&gt;议程&lt;/a&gt;，观察到08月10日晚上是Banquet，直接在Events中找到&lt;a href=&quot;https://statphys28.org/banquet.html&quot;&gt;Banquet&lt;/a&gt;，可以找到Meeting Point在Yasuda Auditorium，Google翻译得到安田讲堂。
    &lt;ul&gt;
      &lt;li&gt;我看到有一些选手赛后讨论说他得到的翻译是安田礼堂，我觉得有点可惜吧。组委会方面，我没有想清楚为什么要求中文答案，其实直接提交英文也是OK的；选手方面，如果去Wikipedia看一下，可以看到中文是安田讲堂，但我也不确定是不是官方中文名称就是了😂，其实如果看日语（安田講堂）的话，也可以很明显看到是安田讲堂。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;直接在Twitter上搜索活动名，可以看到&lt;a href=&quot;https://twitter.com/panda_life/status/1688436626895331328&quot;&gt;相关的推文&lt;/a&gt;，可以看到是A答案是熊猫。对于B，我直接Google”上野駅 3d動物”，查看图片，发现&lt;a href=&quot;https://wow-japan.com/news-flash-shibuya-3d-akida-dog-ads/&quot;&gt;一篇文章&lt;/a&gt;，可以看到涩谷站出口广告牌会有3D秋田犬。
    &lt;ul&gt;
      &lt;li&gt;事实上我还搜索到了新宿的3D的猫，忘了品种了，好像也是三个字，都试一遍就好了。&lt;/li&gt;
      &lt;li&gt;按照官方Writeup，应该是可以推出来出口站是涩谷站的（实际上我是按照上野站做的，乐），但可惜不是立本人。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;赛博井字棋&quot;&gt;赛博井字棋&lt;/h2&gt;

&lt;p&gt;我最开始的思路是去搜索井字棋先手必胜策略，结果发现好像有后手必平策略。于是就在无聊地点了半天，最后脑洞大开尝试覆盖O（我是X，AI是O），发现不可以点。我就去开发者工具看了看，发现是向后端发送POST请求来表示我所选X的位置，最后利用BurpSuite在第三个X的请求中进行覆盖即可。&lt;/p&gt;

&lt;p&gt;之后发现，其实直接在开发者工具中下断点，在第三个X的POST请求发出前修改data即可。&lt;/p&gt;

&lt;p&gt;身边也有同学在console手搓fetch过了的。&lt;/p&gt;

&lt;p&gt;还有一些策略就是第二个X覆盖一个O，这样就会形成两个X一个O的情况，然后后面正常走就可以解决了。&lt;/p&gt;

&lt;h2 id=&quot;奶奶的睡前flag故事&quot;&gt;奶奶的睡前flag故事&lt;/h2&gt;

&lt;p&gt;我的奶奶为什么不告诉我谷歌亲儿子是Pixel！我一直是当作Nexus去搜索，最后什么也没搜到，甚至还自己修了半天的PNG。&lt;/p&gt;

&lt;p&gt;这个题顺着”谷歌”、”Pixel”、”截图”（写Writeup的时候才发现官方给了截图的Hint，我还是自己猜的，可惜了）等关键字就可以搜到Google Pixel今年三月份被爆出来的漏洞Acropalypse，最后找到&lt;a href=&quot;https://acropalypse.app/&quot;&gt;相关的利用工具&lt;/a&gt;，因为题目所给图片的宽像素为1080，所以猜测Pixel 7（或者自己Custom也行），可以恢复出来下半部分截图，拿到flag。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/grandma/flag.png&quot; alt=&quot;Flag from Grandma&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;组委会模拟器&quot;&gt;组委会模拟器&lt;/h2&gt;

&lt;p&gt;简单看一下，第一反应是写一个js跑一下应该就行了，可惜我不怎么会写js。于是F12看了Network，找到了一些后端接口，写了Python代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import requests
import json
import re
import time
import datetime

session = requests.session()

url = &quot;https://hack.lug.ustc.edu.cn/challenge/23/&quot;
cookies = {&quot;cookies-key&quot;: &quot;cookies-value&quot;}
headers = {&quot;headers-key&quot;: &quot;headers-value&quot;}
resp = session.get(url, headers=headers, cookies=cookies)
resp = session.get(&quot;http://202.38.93.111:10021/api/checkToken?token=your_token&quot;, headers=headers, cookies=cookies)
resp = session.post(&quot;http://202.38.93.111:10021/api/getMessages&quot;)
start_time = datetime.datetime.timestamp(datetime.datetime.now())
msgs = json.loads(resp.text)[&quot;messages&quot;]

timestamp = 0
flag_pattern = r&apos;hack\[[a-z]+\]&apos;
for idx, msg in enumerate(msgs):
    if re.search(flag_pattern, msg[&quot;text&quot;]) is not None:
        flag_idx.append(idx)
        sleep = float(msg[&quot;delay&quot;]) - timestamp
        time.sleep(sleep if sleep &amp;gt; 0 else 0)
        timestamp = datetime.datetime.timestamp(datetime.datetime.now()) - start_time
        resp = session.post(&quot;http://202.38.93.111:10021/api/deleteMessage&quot;, json={&quot;id&quot;: idx})

time.sleep(10)
resp = session.post(&quot;http://202.38.93.111:10021/api/getflag&quot;)
print(resp.text)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跑一下就行。写Python就只需要注意sleep的时间就行了，sleep短了会报错”检测到时空穿梭”，sleep久了会撤回失败（题目要求3s内撤回）。&lt;/p&gt;

&lt;h2 id=&quot;虫&quot;&gt;虫&lt;/h2&gt;

&lt;p&gt;这道题我过了很久才做出来（毕竟CTF新手），因为题目Hint是”通过无线信道传输图片的方式”，我没有直接Google到什么东西，所以一直在考虑利用FFT之类的变换将正弦波转换成方波或其他东西来表示0和1，从而恢复图片。之后看到做出来的人越来越多，我决定再看看，这次注意到题目中有提到”接受来自国际空间站（ISS）的图片”，于是通过”ISS”这个关键词检索到了SSTV。&lt;/p&gt;

&lt;p&gt;知道是SSTV之后，就可以发现CTF中还是有不少Misc题目跟SSTV有关，也推荐了一些相关软件，可惜我是Mac，很多软件用不了，找到的也是付费的，最后在GitHub上找到一个&lt;a href=&quot;https://github.com/colaclanth/sstv&quot;&gt;小项目&lt;/a&gt;，直接运行Decode就可以得到包含flag的图片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/insect/flag.png&quot; alt=&quot;Insect Flag&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;json--yaml&quot;&gt;JSON ⊂ YAML?&lt;/h2&gt;

&lt;h3 id=&quot;json--yaml-11&quot;&gt;JSON ⊄ YAML 1.1&lt;/h3&gt;

&lt;p&gt;我是随便试出来的，当时的思路是去看YAML1.2中有提到哪些与YAML1.1不一致的地方，然后去尝试，但好像没有找到太多有用的，最后即将放弃的时候好像在哪里看到了一眼科学计数法，于是试了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1e2&lt;/code&gt;作为值，结果成了。&lt;/p&gt;

&lt;h3 id=&quot;json--yaml-12&quot;&gt;JSON ⊄ YAML 1.2&lt;/h3&gt;
&lt;p&gt;我是在对应的库函数中打断点一点点看的，最后看到了个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuplicateKeyError&lt;/code&gt;，就解出来了，具体过程就不写了，有点折磨说实话。&lt;/p&gt;

&lt;p&gt;这一题可以去看&lt;a href=&quot;https://github.com/USTC-Hackergame/hackergame2023-writeups/blob/master/official/JSON%20%E2%8A%82%20YAML/README.md&quot;&gt;官方Writeup&lt;/a&gt;，看文档还是个好习惯，可惜我没能捕捉到有效信息。&lt;/p&gt;

&lt;h2 id=&quot;git-git&quot;&gt;Git? Git!&lt;/h2&gt;

&lt;p&gt;恰好前段时间了解了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;命令，读完题就猜到用这命令解题，毕竟题目中提到了&lt;strong&gt;本地仓库&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;http集邮册&quot;&gt;HTTP集邮册&lt;/h2&gt;

&lt;p&gt;这题我就是对着MDN的文档一个一个看，看有没有可能触发，最后一个413我找了很久，所以还看了一些RFC的文档，不过也没有什么太多直接的帮助。&lt;/p&gt;

&lt;p&gt;我收集到的状态码有：[100, 200, 206, 304, 400, 404, 405, 412, 413, 414, 416, 505]。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;100 Continue - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expect: 100-continue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;200 OK - 点击就送。&lt;/li&gt;
  &lt;li&gt;206 Partial Content - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range: bytes=1-1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;304 Not Modified - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;400 Bad Request - 不正确的HTTP请求格式都可以触发。&lt;/li&gt;
  &lt;li&gt;404 Not Found - 随便一个不存在的文件即可。&lt;/li&gt;
  &lt;li&gt;405 Method Not Allowed - 随便一个不支持的请求方法（该题中除了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;都不支持）即可。&lt;/li&gt;
  &lt;li&gt;412 Precondition Failed - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;If-Match: &quot;64dbafc8-266&quot;&lt;/code&gt;（原ETag为”64dbafc8-267”）。&lt;/li&gt;
  &lt;li&gt;413 Content Too Large - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-length: 1111111&lt;/code&gt;。这个是我第12个状态码，找了好久，最开始觉得如果我给一个很大的Content，那应该会先被前置的Nginx（即接收我报文的Nginx）返回413，不会请求到题目中的Nginx，最后是在随便试的时候不记得怎么就试了一下，结果出来了。&lt;/li&gt;
  &lt;li&gt;414 URI Too Long - 一个很长的URI即可触发。我是使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf &apos;a%.0s&apos; {1..10000}&lt;/code&gt;生成的Payload。&lt;/li&gt;
  &lt;li&gt;416 Range Not Satisfiable - 超出范围的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt;头即可触发，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range: bytes=615-615&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;长度为615个bytes）。&lt;/li&gt;
  &lt;li&gt;505 HTTP Version Not Supported - 修改为一个不支持的HTTP版本即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中间无状态我是随便试出来的，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;后面加了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;结果触发了，我的flag是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{congratu1ations you discovered someth1ng before http1.0}&lt;/code&gt;，后来经过搜索才知道&lt;a href=&quot;https://www.w3.org/Protocols/HTTP/AsImplemented.html&quot;&gt;HTTP/0.9&lt;/a&gt;，其中也提到了Request格式要求：The client sends a document request consisting of a line of ASCII characters terminated by a CR LF (carriage return, line feed) pair. A well-behaved server will not require the carriage return character.&lt;/p&gt;

&lt;p&gt;搜索HTTP/0.9相关信息时还发现了&lt;a href=&quot;https://stackoverflow.com/questions/6686261/what-at-the-bare-minimum-is-required-for-an-http-request&quot;&gt;一个StackOverflow的问题&lt;/a&gt;还蛮不错，尽管link-only不太好，但我就先不放那么多了。&lt;/p&gt;

&lt;h2 id=&quot;docker-for-everyone&quot;&gt;Docker for Everyone&lt;/h2&gt;

&lt;p&gt;我也没想到我会直接就做预期解，可能是因为之前被docker的root用户坑过不少次，所以猜到了可能利用docker这一”特性”。&lt;/p&gt;

&lt;p&gt;上来直接看了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/flag&lt;/code&gt;，找到symlink path，发现无权限之后，直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -it --rm -v /dev/shm:/mnt alpine&lt;/code&gt;映射目录，然后读取flag。&lt;/p&gt;

&lt;p&gt;正如flag所说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use rootless container please&lt;/code&gt;。具体相关知识可以参考&lt;a href=&quot;https://github.com/USTC-Hackergame/hackergame2023-writeups/blob/master/official/Docker%20for%20Everyone/README.md&quot;&gt;官方Writeup&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我刚搭建博客的时候，曾经老板让搭过一个image，当时就因为root的问题困扰了我很多，印象里是用参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--user&lt;/code&gt;解决的，后来很少自己构建image了，也没怎么关注这个问题了。当时的博客文件名是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run-program-as-common-user-in-docker.md&lt;/code&gt;，可惜博客已经被我删了，不过也确实没什么营养就是了。&lt;/p&gt;

&lt;h2 id=&quot;惜字如金-20&quot;&gt;惜字如金 2.0&lt;/h2&gt;

&lt;p&gt;不太记得去年的惜字如金了，印象里也没很麻烦。&lt;/p&gt;

&lt;p&gt;前两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_equals&lt;/code&gt;很好改:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;check_equals(&apos;creat&apos;, &apos;cre&apos; + &apos;at&apos;)
check_equals(&apos;referrer&apos;, &apos;refer&apos; + &apos;rer&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着往后看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;cod_dict += [&apos;nymeh1niwemflcir}echaet&apos;]
cod_dict += [&apos;a3g7}kidgojernoetlsup?h&apos;]
cod_dict += [&apos;ulw!f5soadrhwnrsnstnoeq&apos;]
cod_dict += [&apos;ct{l-findiehaai{oveatas&apos;]
cod_dict += [&apos;ty9kxborszstguyd?!blm-p&apos;]
check_equals(set(len(s) for s in cod_dict), {24})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现每个长度都为23，与要求24不符，于是在每个字符串最后加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;，这样可以保证不违反惜字如金的标准。通过修改源代码让其在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_equals&lt;/code&gt;之前打印flag，可以得到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5laulyoufeepr3cvees3df7weparsn3sfr1gwn!}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们会发现前五个字符并不符合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag{&lt;/code&gt;的要求，通过查看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decrypt_data&lt;/code&gt;的参数及函数实现（函数实现上没有做任何的复杂变换，只是去了对应index的字符），可以将一些我添加的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;删除，选择相应的辅音字母（即&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g&lt;/code&gt;四个字母）进行重复即可。&lt;/p&gt;

&lt;p&gt;最后得到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;cod_dict += [&apos;nymeh1niwemflcir}echaete&apos;]
cod_dict += [&apos;a3g7}kidgojernoetlsup?he&apos;]
cod_dict += [&apos;ulw!ff5soadrhwnrsnstnoeq&apos;]
cod_dict += [&apos;ctt{l-findiehaai{oveatas&apos;]
cod_dict += [&apos;ty9kxborszstgguyd?!blm-p&apos;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行文件即可得到flag。&lt;/p&gt;

&lt;h2 id=&quot;-高频率星球&quot;&gt;🪐 高频率星球&lt;/h2&gt;

&lt;p&gt;题目提供了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asciinema&lt;/code&gt;录制的文件，可以直接使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asciinema cat asciinema_restore.rec &amp;gt; flag.js&lt;/code&gt;导出所有的终端信息，最后将前后无用信息删除，利用编辑器replace的功能将控制字符删除即可得到原js文件。&lt;/p&gt;

&lt;h2 id=&quot;-小型大语言模型星球&quot;&gt;🪐 小型大语言模型星球&lt;/h2&gt;

&lt;h3 id=&quot;you-are-smart&quot;&gt;You Are Smart&lt;/h3&gt;

&lt;p&gt;考虑到这是只是一个类似于续写故事的模型，所以我的Prompt为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The father think his daughter is smart.&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;后来发现直接问&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Am I smart?&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repeat &quot;you are smart&quot;&lt;/code&gt;更加方便与快捷（注意标点）。&lt;/p&gt;

&lt;h3 id=&quot;accepted&quot;&gt;Accepted&lt;/h3&gt;

&lt;p&gt;考虑到题目限制7个字符，又是一个无厘头的英文单词，所以我就考虑他的原型&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept&lt;/code&gt;加一个字符是7个字符，当然不加字符也会试一下。最后试出来&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept*&lt;/code&gt;可以。&lt;/p&gt;

&lt;p&gt;我朋友的解释是类似于通配符，但我对模型这类东西属实一窍不通，也不知道通配符这种理解有没有道理。&lt;/p&gt;

&lt;h2 id=&quot;-流式星球&quot;&gt;🪐 流式星球&lt;/h2&gt;

&lt;p&gt;思路也很简单，就是根据&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_video.py&lt;/code&gt;的逻辑，逆向恢复即可。&lt;/p&gt;

&lt;p&gt;但事实上，我一直没有搞懂如何确定视频的帧宽和帧高，不合适的宽和高会导致画面变形。我是用Mac的Preview直接手量两个bilibili logo相同部分的像素值，不过这样明显不精确，比如我量出来的宽是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;426&lt;/code&gt;，结果是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;427&lt;/code&gt;，不过从变形的画面中还是可以看出来flag的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import cv2
import numpy as np

def restore_video(input, output, frame_count, frame_width, frame_height):
    # 1. 读取输出文件
    buffer = np.fromfile(input, dtype=np.uint8)
    print(len(buffer))
    if frame_count * frame_width * frame_height * 3 &amp;lt; len(buffer):
        frame_count = len(buffer) // (frame_width * frame_height * 3) + 1
    # 1.1 用0补齐被删除的部分
    buffer = np.pad(buffer, (0, frame_count * frame_width * frame_height * 3 - len(buffer)), &apos;constant&apos;)

    # 2. 恢复原始形状
    buffer = buffer.reshape((frame_count, frame_height, frame_width, 3))

    # 3. 创建新的视频文件
    fourcc = cv2.VideoWriter_fourcc(*&apos;XVID&apos;)
    out = cv2.VideoWriter(output, fourcc, 20.0, (frame_width, frame_height))

    # 将 buffer[0] 保存为图片，方便量宽和高之类的
    # cv2.imwrite(&apos;frame0.jpg&apos;, buffer[0])

    # 4. 写入帧
    for i in range(frame_count):
        out.write(buffer[i])

    out.release()

# 原始视频的属性
frame_count = 10   # 原始视频的帧数
frame_width = 427  # 原始视频的帧宽度，正确值
frame_height = 759  # 原始视频的帧高度，正确值

# 调用函数
restore_video(&apos;video.bin&apos;, &apos;restored_video.avi&apos;, frame_count, frame_width, frame_height)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hg23/stream-planet/flag.png&quot; alt=&quot;Stream Planet Flag&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-低带宽星球&quot;&gt;🪐 低带宽星球&lt;/h2&gt;

&lt;h3 id=&quot;小试牛刀&quot;&gt;小试牛刀&lt;/h3&gt;

&lt;p&gt;网上随便找一个PNG压缩网站即可。&lt;/p&gt;

&lt;h2 id=&quot;komm-süsser-flagge&quot;&gt;Komm, süsser Flagge&lt;/h2&gt;

&lt;h3 id=&quot;我的-post&quot;&gt;我的 POST&lt;/h3&gt;

&lt;p&gt;研究了很久，最后用socket解决了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import socket

host = &apos;202.38.93.111&apos;
port = 18080

# 创建一个socket连接到服务器
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

# 构造一个分块传输编码的HTTP请求，故意将&quot;POST&quot;分割为两部分
# &quot;PO&quot;和&quot;ST&quot;分别作为两个不同的块发送
request = [
    &apos;PO&apos;,  # 首个块内容
    &apos;ST / HTTP/1.1\r\n&apos;,  # 拼接到第一个块内容，形成&quot;POST&quot;
    f&apos;Host: {host}\r\n&apos;,
    &apos;Transfer-Encoding: chunked\r\n&apos;,
    &apos;\r\n&apos;,
    &apos;64\r\n&apos;,  # 第二个块的长度，十六进制的&quot;64&quot;
    &apos;your_token=\r\n&apos;,  # 第二个块的内容
    &apos;0\r\n&apos;,  # 结束块的长度
    &apos;\r\n&apos;  # 结束块
]

for r in request:
    s.send(r.encode())

# 接收响应
response = s.recv(4096)

# 关闭socket连接
s.close()

# 打印响应数据
print(response.decode())
print(len(response))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;我的-p&quot;&gt;我的 P&lt;/h3&gt;

&lt;p&gt;这题第二问我非预期解了，也就是&lt;a href=&quot;https://github.com/USTC-Hackergame/hackergame2023-writeups/blob/master/official/Komm,%20s%C3%BCsser%20Flagge/README.md&quot;&gt;官方Writeup&lt;/a&gt;里提到的非预期解，即，第一问的解法也可以直接解这一问。&lt;del&gt;虽然只是干饭前是在没思路了随便试了一下😂&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;异星歧途&quot;&gt;异星歧途&lt;/h2&gt;

&lt;p&gt;说实话，感觉这题对不玩Mindustry的人（比如我）很不友好。进去看了半天，甚至因为一些奇怪的原因我都点不了开关。最后决定从第四组开始做（后来朋友说可以去找视频看一下Mindustry逻辑入门会好一些）。&lt;/p&gt;

&lt;p&gt;第四组开关应该是（至少我觉得）最有逻辑的一部分，四个开关对应四个发电装置，点一点可以发现门逻辑，最后将电输送过去即可。&lt;/p&gt;

&lt;p&gt;第三组开关，每个都点一遍也没看到有什么即时的变化，看了好久才发现发电装置需要某种材料和冷却液，而制造冷却液的机器没有水，总之就是一些连锁反应，然后尝试不同按钮找到相应控制的相应部分的按钮，调整合适即可（这一部分其实没有搞懂，因为开关的作用其实并不是很清楚，感觉就跟有时候图形界面操作但不知道实际命令执行影响了什么东西一样）。&lt;/p&gt;

&lt;p&gt;前两组我都是遍历的，值得一提的是我好像注意到第二组的最后一个开关会导致第三组开关那一部分的冷却液流失，所以相当于少遍历了一个bit。&lt;/p&gt;

&lt;p&gt;具体什么道理看&lt;a href=&quot;https://github.com/USTC-Hackergame/hackergame2023-writeups/blob/master/official/%E5%BC%82%E6%98%9F%E6%AD%A7%E9%80%94/README.md&quot;&gt;官方Writeup&lt;/a&gt;吧，简单看了一下，觉得如果自己知道怎么查看逻辑相关的东西的话，应该很好做出来，感觉有点依赖于游戏熟悉程度了（具体细节我就不再探索了，如果是MineCraft我可能会看一下，我就这么双标🤪）。&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="CTF" />
      

      

      
        <summary type="html">My Hackergame 2023 Writeup.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">我的比赛经历</title>
      
      
      <link href="https://mirageturtle.github.io/2022/03/competition/" rel="alternate" type="text/html" title="我的比赛经历" />
      
      <published>2022-03-06T15:12:00+08:00</published>
      <updated>2022-03-06T15:12:00+08:00</updated>
      <id>https://mirageturtle.github.io/2022/03/competition</id>
      <content type="html" xml:base="https://mirageturtle.github.io/2022/03/competition/">&lt;blockquote&gt;
  &lt;p&gt;先写大学以来的吧，中学也没有什么经历，有也记不得了。
比赛记录的不算特别详细，可能有的比赛会专门写博文去记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;2020robogame&quot;&gt;2020·robogame&lt;/h1&gt;

&lt;p&gt;这是我上了大学参加的第一个比赛，也是我最遗憾也最可惜甚至有点后悔的比赛。&lt;/p&gt;

&lt;p&gt;这是学校举行的机器人比赛，一般要求全自动完成一定的内容，整个机器人由队伍自己设计并搭建完成，最后上场比赛。我一直对机器人很感兴趣，所以当我知道这个比赛的时候，我就决定报名了。&lt;/p&gt;

&lt;p&gt;只是……我知道的比较晚，加上没有参加过什么比赛（是指任何比赛，而不是相关的比赛），在当时的条件下，让我败得一塌糊涂。&lt;/p&gt;

&lt;p&gt;一般来说这个比赛会在每年的五六月份开始，宣讲培训报名之类的，主要是在暑假进行备赛，开学之后在10月份进行比赛。而那一年正好碰上疫情，所以所有培训就放在了线上，备赛甚至有很大一段时间也是在线上。在线上意味着很多队员没有足够的动力去进行机器人的设计与制作，我们的进度很慢，线上备赛的过程甚至都没有买什么零件在家组装，而别的队伍在家已经有了部分实体。&lt;/p&gt;

&lt;p&gt;到了学校，作为队长的我把大家凑起来开始干活，紧紧张张磕磕绊绊通过了二审的复审，这也意味着，与课程、与成绩相关的部分已经确定了，同时也意味着，没有想打好比赛而只是想水学分的队员失去了唯一的动力。&lt;/p&gt;

&lt;p&gt;最后不出所料地没有通过初赛，也就那样草草了事。&lt;/p&gt;

&lt;p&gt;回过头来发现，其实在做事情的，也只有我跟另外一两位同学，甚至我都没有做特别的多的事情，我也就帮队里的大佬做做事情，整个队伍五个人有一半的人是没有太多贡献的。这当然与身为队长的我撇不开关系，我没有很好地领导整个队伍，没有协调好各个部分。但比赛之后我也进行了深刻反思，我当时知道比赛的时候已经开始备赛一段时间了，且大家都在家里，导致最后我们队伍的成员，其实都互相不认识，这也算是我从这个比赛中收获最大的一点吧。&lt;/p&gt;

&lt;p&gt;但这个比赛，是我&lt;strong&gt;梦的起点&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;2021华为软件精英挑战赛&quot;&gt;2021·华为软件精英挑战赛&lt;/h1&gt;

&lt;p&gt;这是一次偶然的机会发现的这个比赛，我也不记得我怎么知道这个比赛的。但我知道，就算我自己没发现，我也会知道的，因为我发现比赛之后一段时间，我们班主任就在群里发了hhhhhhh&lt;/p&gt;

&lt;p&gt;因为班主任在群里发了，所以我就找了两个同班同学组队去参加了这个比赛。然后，大佬就带我飞了。&lt;/p&gt;

&lt;p&gt;说实话，如今回过头看这场比赛，真的离谱，我也真的惭愧，因为从头到尾只有大佬一个人在做事。整个项目逻辑、实现全是他一个做的。我和另外一位同学就是在旁边加油，这毫不夸张。&lt;/p&gt;

&lt;p&gt;在此期间也有一些收获，那就是跟着大佬简单熟悉学习了一下Python。&lt;/p&gt;

&lt;p&gt;因为大佬太强了，所以我们进入了复赛，而复赛是在上海举办的（我在合肥上学，安徽和上海是一个赛区），线下比赛，所以，我人生第一次来到上海。&lt;/p&gt;

&lt;p&gt;去了上海，也只呆了一天，没有什么别的感觉，只有村里人进城的感觉。&lt;/p&gt;

&lt;p&gt;这一次的上海之行，让我觉得，&lt;strong&gt;比赛，真的可以让我成长&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;当然这是对于我来说是这样，我是一个不爱学习的人，不太喜欢每天跟着课本跟着课程学知识，相较之下更喜欢做一些小项目，从这个角度来看，比赛更适合我一点，更何况我好像也不怎么重视成绩，只要能毕业就行。&lt;/p&gt;

&lt;h1 id=&quot;2021igem&quot;&gt;2021·iGEM&lt;/h1&gt;

&lt;p&gt;这是我参加的最大的比赛了，虽然跟我的专业好像不怎么沾边。iGEM，全称&lt;em&gt;The International Genetically Engineered Machine&lt;/em&gt;，国际遗传工程机器设计竞赛，也有叫国际基因工程机器设计竞赛，影响不大。&lt;/p&gt;

&lt;p&gt;按照道理来说，每年这个比赛在11月12月左右招新，组建参赛队伍，在漫长地准备了快一年之后，在次年的10月底左右，前往波士顿进行比赛，现场答辩，最后出成绩。而我们这一年的队伍，是在4月底五月初开始组建的，刚好又快赶上期末考试周，还有建队初期的各种事情以及项目前期的调研，所以项目真正开始其实都已经到8月底9月初了吧。&lt;/p&gt;

&lt;p&gt;每一年的新队伍是由上年的老队员负责招新的，但是由于我们上一年的队伍备赛碰上了疫情，整个备赛转成了线上，甚至比赛答辩都变成了线上，最后就摆烂了，听说最后只交了三行代码（我觉得有点夸张，毕竟写一个页面光固定的格式就好多行了）。摆烂就摆到底，干脆就没招新，在4月份的时候前年（再上一年）的队伍发现了这件事，于是出来招新。想想也是，因为上一年没有做什么当然也没有什么成绩，也不太好意思招新。&lt;/p&gt;

&lt;p&gt;说实话，当初报名参赛除了希望能学到一些知识以外，更重要的是希望能去一趟波士顿哈哈哈哈哈，不过最后不出所料地因为疫情还是线上比赛。&lt;/p&gt;

&lt;p&gt;对于这个比赛，我其实也没做多少事情，队里有一位大佬L，是那一年学校的LUG（Linux User Group）主席，可能这个协会名称也没什么大不了的，但是我们学校流传着一句话，“所有跟计算机相关的协会，均可视为LUG的子会”。事实上这个协会负责着学校很大一部分的计算资源，比如我们学校的镜像。我在队里就只做了两件事，一件事是协调了我们后端与队长、前端的工作，另外一件就是写了几个极其简单的python函数（就是request一下然后拿到数据解析一下，巨简单），之后的整个函数封装及服务器的配置都是由L完成的。此外L还参与了前端的开发以及最后项目wiki的编写（对哦，我后期还编写并修改了好多篇wiki呢，所以我做了三件事）。总之这个比赛自己也没做什么跟计算机相关的工作，又被大佬带飞了。&lt;/p&gt;

&lt;h1 id=&quot;2021-2022robomaster&quot;&gt;2021-2022·RoboMaster&lt;/h1&gt;

&lt;p&gt;哈哈，看到比赛标题应该就能猜到又是跟机器人有关了吧。事实上，我知道这个比赛以及知道当时的招新，就是在我当年的robogame比赛群里看到的通知。&lt;/p&gt;

&lt;p&gt;说实在，参加之前的那些比赛的时候，我总希望自己很努力，为团队贡献不少力量，然后取得好成绩，结果每次到头来，发现自己总是躺着hhhhhh，我觉得这是因为我能力上有着不足。所以在加入RoboMaster队伍时，我就决定在队里当个普普通通的队员（因为之前都有非队员职位），好好学习，再为团队做贡献。毕竟这是我加入过的团队规模最大的队伍了，我就想着在队里跟大佬跟前辈好好学习技术。&lt;/p&gt;

&lt;p&gt;结果在我通过了视觉组的入队考核后一个半月，因为视觉组长有着不小的科研压力，退位当了队伍顾问，而剩下的视觉队员也基本都是刚通过考核的新队员，所以稀里糊涂地让最先通过考核的我当了视觉组长。（笑&lt;/p&gt;

&lt;p&gt;之后就是被有着“资本家”之称的队长进行各种压榨的故事了，到现在还在备赛，等打了比赛之后再更新叭。&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">希望用本文，或回忆，或记录自己的一些或大或小的比赛经历。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Hello World</title>
      
      
      <link href="https://mirageturtle.github.io/2021/10/hello-world/" rel="alternate" type="text/html" title="Hello World" />
      
      <published>2021-10-27T19:14:00+08:00</published>
      <updated>2021-10-27T19:14:00+08:00</updated>
      <id>https://mirageturtle.github.io/2021/10/hello-world</id>
      <content type="html" xml:base="https://mirageturtle.github.io/2021/10/hello-world/">&lt;p&gt;2021年10月27日13时10分左右，一个不知天高地厚的傻小子在他的宿舍和某高中好友群，扬言要在二十岁之前搭出自己的博客。&lt;/p&gt;

&lt;p&gt;他曾经尝试写一个博客网站，不过因为他太笨了，不是很会使用Jekyll，最后就用他那一点点浅显得不能再浅显的html知识，写了一个没有背景的主页，几篇只有文字的博文，最后还迫于期末考试压力放弃了。&lt;/p&gt;

&lt;p&gt;2021年，他参加了HackerGame，对CTF一无所知的他在即将把搜索引擎跑瘫痪的时候，发现了GZ大佬的博客，&lt;a href=&quot;https://blog.gztime.cc/&quot;&gt;GZTime&lt;/a&gt;。他参考其使用&lt;a href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;重新搭建自己的博客。&lt;/p&gt;

&lt;p&gt;2023年，他也参加了HackerGame，也获得了一定的成绩，所以决定写Writeup，顺便将博客重新使用Jekyll搭建，并且构建的简约一点。&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">2021年10月27日13时10分左右，一个不知天高地厚的傻小子在他的宿舍和某高中好友群，扬言要在二十岁之前搭出自己的博客。</summary>
      

      
      
    </entry>
  
  
</feed>
